<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 配置Spring的ioc，把service对象配置进来 -->
    <bean id="accountService" class="com.tms.test.service.impl.AccountServiceImpl"/>

    <!--
    Spring中基于xml的aop配置
     1）把通知的bean也叫个spring来管理
     2）使用aop:config标签表名开始AOP配置
     3）使用aop:aspect标签表示开始配置切面
        id属性：给切面提供一个唯一标志
        ref属性：指定通知类bean的id
     4）在aop:aspect标签的内部，使用对应的标签，来配置通知的类型
        我们现在的实例是让printLog方法在接入点方法执行之前运行，所以是前置通知
        aop:before：表示前置通知
            method属性：指定Logger类中的目标方法，来作为前置通知
            pointcut属性：用于指定切入点表达式，该表达式的含义是指定对业务层的那些方法增强
                切入点表达式的写法：
                    关键字：execution（表达式）
                    表达式：
                        访问修饰符   返回值 包名.包名.包名……类名.方法名（参数列表）
                        execution(public void com.tms.test.service.impl.AccountServiceImpl.saveAccount())
                        访问修饰符可以省略execution(void com.tms.test.service.impl.AccountServiceImpl.saveAccount())
                        返回值可以用通配符，表示任意返回值execution(* com.tms.test.service.impl.AccountServiceImpl.saveAccount())
                        包名可以使用通配符表示任意包，但是有几级包就需要有几个*
                            execution(* *.*.*.*.*.AccountServiceImpl.saveAccount())
                            可以再使用..表示当前包和所有子包execution(* *..AccountServiceImpl.saveAccount())
                        类名和方法名都可以使用*实现统配execution(* *..AccountServiceImpl.*())
                        参数列表：
                            可以直接写数据类型
                                基本类型直接写名称           int
                                引用类型写包名，类名的方法    java.lang.String
                            可以使用通配符表示任意类型（但是必须存在参数）
                            可以使用..表示有无参数均可，参数是任意类型
                    全通配写法：
                        * *..*.*(..)
                    实际开发中通常写法
                        切到业务层实现类下的所有方法
                            * com.tms.test.service.impl.*.*(..)
     -->

    <!-- 配置Logger类 -->
    <bean id="logger" class="com.tms.test.utils.Logger"/>

    <!-- 配置AOP -->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(* com.tms.test.service.impl.*.*(..))"/>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知的类型，并且建立通知方法和接入点方法的关联 -->

            <!-- 配置前置通知，在切入点方法执行之前执行 -->
            <!--<aop:before method="printlog" pointcut="execution(public void com.tms.test.service.impl.AccountServiceImpl.saveAccount())"/>-->
<!--            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>-->
            <!--<aop:before method="printlog" pointcut="execution(* *..*.*(..))"/>-->

            <!-- 配置后置通知，在切入点方法正常执行之后执行，和异常通知不可能同时出现 -->
<!--            <aop:after-returning method="afterReturnPrintLog" pointcut-ref="pt1"/>-->

            <!-- 配置异常通知，在切入点方法产生异常之后执行，和后置通知不可能同时出现 -->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>-->

            <!-- 配置最终通知，无论切入点方法是否正常执行，都会在最后执行 -->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pt1"/>-->

            <!--
            配置切入点表达式
                id属性：用于指定表达式的唯一标志
                expression属性：用于指定表达式内容
            这个标签放在aop:aspect标签内部时，只能在当前切面可用；相对的，当此标签放在外部时，就是所有的切面都可以使用
             -->
<!--            <aop:pointcut id="pt1" expression="execution(* com.tms.test.service.impl.*.*(..))"/>-->

            <!-- 配置环绕通知（详细注释见Logger类中 -->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"/>
        </aop:aspect>
    </aop:config>
</beans>