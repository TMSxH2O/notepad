@动态代理
	概念：见 @什么是动态代理
	特点：
		字节码随用随创建，随用随加载

	作用：
		在不改变源码的基础上，对方法进行增强；还可以实现访问控制

	分类：
		基于接口的动态代理（官方）
		基于子类的动态代理（第三方）

	基于接口的动态代理：
		涉及的类：Proxy
		如何创建代理对象：
			使用Proxy类中的newProxyInstance方法
		创建代理对象的需求
			被代理类至少实现一个接口，如果没有，则不能使用
		newProxyinstance方法的参数
			ClassLoader（类加载器）
				用于加载代理字节码。和代理对象使用相同的类加载器'固定写法'
			Class[]（字节码数组）
				让代理对象和被代理对象有相同的方法'固定写法'
			InvocationHandler（用于提供增强的代码）
				增强方法。通常使用匿名类，但不是必须。此接口的实现类都是谁用谁写
				内部方法：
					'public Object invoke(Object proxy, Method method, Obejct[] args)'

					参数：
						proxy	代理对象的引用
						method	当前执行的方法
						args	当前执行方法所需的参数
					返回值：	和被代理对象有相同的返回值
					重要方法： "method.invoke(被代理对象, method.args)"运行原方法
	
	基于子类的动态代理
		涉及的类：Enhancer（cglib库）
		如何创建代理对象：
			使用Enhancer类中的create方法
		创建代理对象的需求
			被代理类不能是最终类final
		create方法的参数
			Class（字节码）
				用于指定被代理对象的字节码(.getClass)
			Callback（用于提供增强的代码）
				增强方法。通常使用匿名类，但不是必须。此接口的实现类都是谁用谁写。通常使用该接口的子接口MethodInterceptor（方法拦截）
				内部方法：
					'public Object intercept(Object o, Method method, Obejct[] objects, MethodProxy methodProxy)'
					代理对象的任何方法都会经过该方法
					参数：
						o			代理对象的引用		
						method		当前执行的方法
						objects		当前执行方法所需的参数
							以上三个与基于接口的动态代理功能一致
						methodProxy	当前执行方法的代理对象
					返回值：	和被代理对象有相同的返回值（和上面一致）
					重要方法： "method.invoke(被代理对象, method.args)"运行原方法


@InvocationHandler
	Java动态代理接口
	最主要的作用是用于在对已经封装的项目，不修改其代码的情况下，进行修改。增强了原本方法的功能。

	主要方法invoke
		其中的method.invoke，使JVM可以通过这条语句，来执行原本的方法。
		即，在这样的情况下，可以做到，在对代码不进行修改的情况下，新增其他的功能。

	可以在这个实现类中，添加方法来创建代理，从而实现更加完整的封装。
		Proxy.newProxyInstance(1, 2, 3)
		1)代理谁就用谁的类加载器(可以在这个实现类中设置代理对象类作为属性)
		2)代理谁就要用与对方相同的接口(如果对象是一个类，则可以使用.getInterfaces()方法)
		3)何如代理(在这个方法下，就可直接使用this，返回这个实现类)

@装饰者模式
	定义：
		在不改变原有对象的基础上，将功能附加到对象上。提供了比继承更有弹性的替代方法（扩展原有对象功能）
	
	类型：
		结构性
	
	适用场景：
		1）扩展一个类的功能或者给一个类增加职责
		2）给一个对象动态的添加功能，或动态撤销功能
	
	优点：
		1）继承的有力补充，比继承灵活，不改变原有对象的情况下给一个对象扩展功能。（继承在扩展功能上是静态的，		必须在编译时就确定好，而是用装饰者模式可以在运行时决定，装饰者也建立在继承的基础上）
		2）通过使用不同装饰类以及这些类的排列组合，实现不同的效果
		3）符合开闭原则
	
	缺点：
		1）会出现更多的代码，更多的类，增加程序的复杂性
		2）动态装饰时，多层装饰时会更复杂（使用继承来扩展功能会增加类的数量，使用装饰者模式不会像继承那样增加		那么多类的数量，当对象的数量增加到一定的级别时，无疑会大大增加我们代码调试的难度）

@属性的专有名词
	最常见的属性定义：
		private String username = null;
		private		访问修饰符
		String		数据类型
		username	变量名称
		null		数据类型

@抽象类和接口的区别
	抽象类
		1）可以有默认的方法实现
		2）子类使用extends关键字来继承；如果子类不是抽象类，就必须实现父级抽象类中的所有抽象方法（不是抽象方法		则可写可不写）
		3）抽象类可以有构造器（构造器不能使用abstract修饰）
		4）正常Java类可以被实例化，抽象类不能被实例化
		5）抽象方法可以使用public、protected、default访问修饰符进行修饰（注：抽象类自身只能使用public修饰）
		6）抽象类可以有main方法
		7）抽象类可以继承一个类和实现多个接口
		8）抽象类比接口速度快
		9）如果在抽象类中添加新非abstract的方法，可以直接添加而不会影响子类（只有在添加abstract方法时会影响）
	接口
		1）完全抽象，不存在方法的实现
		2）子类使用implements去实现接口，需要实现接口中的所有方法
		3）接口不能有构造器
		4）接口和正常java类时不同的类型（不存在实例化的说法）
		5）接口默认是使用public访问修饰符（且不能修改）
		6）接口中不能有main方法（所以不能运行）
		7）接口只能继承一个或多个接口（不能继承类）
		8）接口速度稍慢，因为它需要去寻找类中实现它的方法
		9）只要在接口中添加方法，实现它的类就需要改变，必须去实现（接口中只有抽象方法，因此调用的实现类必须去		实现）

	设计层面的区别：
		1）抽象类是一种对事务的抽象，是对整个类进行抽象，包括属性和方法；接口是对方法的抽象。
			如果一个类继承或实现了某个抽象类，那么一定是抽象类的子类（拥有同一属性或方法的类）
		2）设计层面不同，抽象类作为很多子类的父类，是一种模板设计；接口是一种规范，它是一种辐射式设计
			对于抽象类，如果需要添加新的方法，可以直接在抽象方法中添加实现，子类不用改变；而接口则在发生改变之后，其实现类都需要随之发生变化。
	
	接口和抽象类分别在什么时候使用
		1）如果拥有一些方法，并且想让他们中的没有某些有具体的实现，就使用抽象类
		2）如果想实现多重继承，就是用接口。由于java不支持继承，子类不能继承多个类，但一个类可以实现多个接口，		因此可以使用接口来实现
		3）如果基本功能都在不断改变，那就是用抽象类，如果使用接口，每次的变更都需要改变对应的所有实现类
			
@Serializable 序列化接口(java.io.Serializable)
	java在创建实体类时，长需要实现这个接口，用于声明对象实例化。
	Q：什么叫序列化？
		序列化就是将一个对象的状态（各个属性量）保存起来，然后可以在适当的时候再使用。
		总所周知，我们创建的对象是暂时保存在内存中的，不能移动，有时为了使用介质转移对象，并且将对象的状态保存下来，就需要把对象保存下来，这个过程就叫序列化。
		序列化分为两个部分：序列化和反序列化
			1）序列化就是过程的第一部分，将数据分解成为字节流，以便存储在文件中或在网络上传输。
			2）反序列化就是打开字节流并重构对象。
			对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据要求恢复数据的对象实例。
		PS.序列化通常用于网络安全
		tms：序列化就是将其中的属性一同转化成二级制数据，方便传输的同时，还保存了数据。表现出来最明显的效果是，对象可以使用Stream数据流传输。

	Q：序列化的特点
		如果某个类能够被序列化，其子类也可以被序列化。声明为static和transient类型的成员数据不能被序列化。
			static：代表类的状态
			transient：代表对象的临时数据

	Q：什么时候使用序列化？
		1）对象序列化可以实现分布式对象。只要应用例如：RMI要利用对象序列化运行远程主机上的服务，就像再本地机上运行对象一样。
		2）java对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。可以将整个对象层次写入字节流中，可以保存在文件中或网络连接上传递。利用对象序列化可以进行对象的“深复制”，即复制对象本身及引用的对象本身。序列化一个对象可以得到整个对象序列。

===========================================================================
@什么是动态代理
	概念：
		打个比方：
			1)没有使用代理
				用户		用户可以直接去购买生产商的商品，以及请求售后服务
				生产商		直接为用户提供商品，以及售后服务
			2)使用代理
				用户		用户需要在代理商处够买和请求售后服务
				代理商		(对用户)提供商品，向用户提供售后服务(功能增强)，或者有可能是向官方请求售后服务(直				接调用)
							(对生产商)向生厂商请求商品，帮助生产商完成销售商品和售后等业务
				生产商		向代理商提供商品
			总结：因为代理商的加入，让生产商可以简化操作，并且将部分重复繁琐的操作交给代理商来实现。而代理商可以专		门针对需要的功能进行增强，对多个同类的商品进行处理。
				代理的主要作用是增强现有功能。
		对象的执行方法，交给代理来负责。比如user.get()方法，是User对象亲自去执行。而使用代理则是proxy去执行get方法。

===========================================================================
